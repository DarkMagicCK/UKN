const uniform int NUM_SAMPLES = 16;

const uniform float4x4 projection;
const uniform float sampleRadius;
const uniform float distanceScale;
const uniform float2 gbufferSize;

struct VertexOutputType {
	float4 position: POSITION;
	float2 uv: TEXCOORD0;
	float3 viewDirection: TEXCOORD1;
};

float3 decode(float3 enc) {
	return (2.0f * enc.xyz - 1.0f);
}

float4 FragmentProgram(VertexOutputType input,
					   uniform sampler2D normalMap: TEX0,
					   uniform sampler2D depthMap: TEX1,
					   uniform sampler2D randNormalMap: TEX2): COLOR0 {
  const float total_strength = 1.0;
  const float base = 0.2;
  
  const float area = 0.0075;
  const float falloff = 0.000001;
  
  const float radius = 0.001;
  
  float3 sample_sphere[16] = {
      float3( 0.5381, 0.1856,-0.4319), float3( 0.1379, 0.2486, 0.4430),
      float3( 0.3371, 0.5679,-0.0057), float3(-0.6999,-0.0451,-0.0019),
      float3( 0.0689,-0.1598,-0.8547), float3( 0.0560, 0.0069,-0.1843),
      float3(-0.0146, 0.1402, 0.0762), float3( 0.0100,-0.1924,-0.0344),
      float3(-0.3577,-0.5301,-0.4358), float3(-0.3169, 0.1063, 0.0158),
      float3( 0.0103,-0.5869, 0.0046), float3(-0.0897,-0.4940, 0.3287),
      float3( 0.7119,-0.0154,-0.0918), float3(-0.0533, 0.0596,-0.5411),
      float3( 0.0352,-0.0631, 0.5460), float3(-0.4776, 0.2847,-0.0271)
  };
  
  float3 random = normalize( tex2D(randNormalMap, input.uv * 4.0).rgb );
  
  float depth = tex2D(depthMap, input.uv).r;
 
  float3 position = float3(input.uv, depth);
  float3 normal = normalize(decode(tex2D(normalMap, input.uv)).rgb);
  
  float radius_depth = radius/depth;
  float occlusion = 0.0;
  for(int i=0; i < 16; i++) {
    float3 ray = radius_depth * reflect(sample_sphere[i], random);
    float3 hemi_ray = position + sign(dot(ray,normal)) * ray;
    
    float occ_depth = tex2D(depthMap, saturate(hemi_ray.xy)).r;
    float difference = depth - occ_depth;
    
    occlusion += step(falloff, difference) * (1.0 - smoothstep(falloff, area, difference));
  }
  float ao = 1.0 - total_strength * occlusion * (1.0 / 16);
  return float4(ao+base, ao+base, ao+base, 1);
}