const uniform int NUM_SAMPLES = 8;

const uniform float4x4 projection;
const uniform float sampleRadius;
const uniform float distanceScale;
const uniform float4x4 inverseViewProj;
const uniform float2 gbufferSize;

struct VertexOutputType {
	float4 position: POSITION;
	float2 uv: TEXCOORD0;
	float3 viewDirection: TEXCOORD1;
};

float3 decode(float3 enc) {
	return (2.0f * enc.xyz - 1.0f);
}

float4 FragmentProgram(VertexOutputType input,
					   uniform sampler2D normalMap: TEX0,
					   uniform sampler2D depthMap: TEX1,
					   uniform sampler2D randNormalMap: TEX2): COLOR0 {

	float4 samples[8] = {
		float4(0.355512, 	-0.709318, 	-0.102371, 	0),
		float4(0.534186, 	0.71511, 	-0.115167, 	0),
		float4(-0.87866, 	0.157139, 	-0.115167, 	0),
		float4(0.140679, 	-0.475516, 	-0.0639818, 0),
		float4(-0.207641, 	0.414286, 	0.187755, 	0),
		float4(-0.277332, 	-0.371262, 	0.187755, 	0),
		float4(0.63864, 	-0.114214, 	0.262857, 	0),
		float4(-0.184051, 	0.622119, 	0.262857, 	0)
	};

	float3 viewDirection = normalize(input.viewDirection);
    float depth = tex2D(depthMap, input.uv).g;

	float3 se = depth * viewDirection;
	float3 randNormal = normalize(tex2D(randNormalMap, input.uv * 20).xyz);
	float3 normal = normalize(decode(tex2D(normalMap, input.uv).xyz));
	float finalColor = 0.0f;

	float rad = sampleRadius;

	for(int i=0; i < NUM_SAMPLES; i++) {
		float3 ray = reflect(samples[i].xyz, randNormal) * rad;
		
		float4 sample = float4(se + ray, 1.0f);
		float4 ss = mul(sample, projection);
		float2 sampleTexCoord = 0.5f * ss.xy / ss.w + float2(0.5, 0.5);
		sampleTexCoord.y = 1.0 - sampleTexCoord.y;

		float sampleDepth = tex2D(depthMap, sampleTexCoord).g;
		float depthDiff = max(depth - sampleDepth, 0.0);

		if(saturate(sampleDepth / 1000.f) == 1.0) {
			finalColor += 1.0;
		} else {
			float occulusion = distanceScale * depthDiff;
			finalColor += 1.0f / (1.0f + occulusion * occulusion * 0.1);
		}
	}
	return float4(finalColor / NUM_SAMPLES,
				  finalColor / NUM_SAMPLES,
				  finalColor / NUM_SAMPLES,
				  1.0f);
}