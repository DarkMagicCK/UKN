const uniform float4x4 worldMatrix;
const uniform float4x4 viewMatrix;
const uniform float4x4 projectionMatrix;

struct VertexOutputType {
	float4 position: POSITION;
	float2 texCoord: TEXCOORD0;
	float3 normal: TEXCOORD1;
	float3 depth: TEXCOORD2;
	float3 tangent: TEXCOORD3;
	float3 binormal: TEXCOORD4;
};

VertexOutputType VertexProgram(in float2 texCoord: TEXCOORD0,
						 	   in float3 position: POSITION,
				   		 	   in float3 normal: NORMAL,
				   		 	   in float3 tangent: TANGENT,
				   		 	   in float3 binormal: BINORMAL) {

	VertexOutputType output;
	float4 worldPos = mul(float4(position, 1), worldMatrix);
	float4 viewPos = mul(worldPos, viewMatrix);
	output.position = mul(viewPos, projectionMatrix);

	output.depth.x = output.position.z;
	output.depth.y = output.position.w;
	output.depth.z = viewPos.z;

	output.texCoord = texCoord;

	output.normal = normalize(mul(normal, (float3x3)worldMatrix));
	output.tangent = normalize(mul(tangent, (float3x3)worldMatrix));
	output.binormal = normalize(mul(binormal, (float3x3)worldMatrix));

	return output;
}
